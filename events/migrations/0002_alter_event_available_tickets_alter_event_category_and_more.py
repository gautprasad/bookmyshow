# Generated by Django 4.2.16 on 2024-09-21 05:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('events', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='event',
            name='available_tickets',
            field=models.PositiveIntegerField(default=100, error_messages={'blank': 'Available tickets cannot be blank.', 'invalid': 'Enter a valid number of available tickets.', 'null': 'Available tickets cannot be null.'}, validators=[django.core.validators.MinValueValidator(0, message='Available tickets cannot be negative.')]),
        ),
        migrations.AlterField(
            model_name='event',
            name='category',
            field=models.ForeignKey(error_messages={'null': 'Category cannot be null.'}, on_delete=django.db.models.deletion.CASCADE, to='events.category'),
        ),
        migrations.AlterField(
            model_name='event',
            name='cost_per_ticket',
            field=models.DecimalField(decimal_places=2, error_messages={'blank': 'Cost per ticket cannot be blank.', 'invalid': 'Enter a valid cost.', 'null': 'Cost per ticket cannot be null.'}, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01, message='Cost per ticket must be greater than zero.')]),
        ),
        migrations.AlterField(
            model_name='event',
            name='created_by',
            field=models.ForeignKey(error_messages={'null': 'Created by cannot be null.'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='event',
            name='date',
            field=models.DateField(error_messages={'invalid': 'Enter a valid date.', 'null': 'Date cannot be null.'}),
        ),
        migrations.AlterField(
            model_name='event',
            name='description',
            field=models.TextField(error_messages={'blank': 'Description cannot be blank.', 'null': 'Description cannot be null.'}),
        ),
        migrations.AlterField(
            model_name='event',
            name='event_status',
            field=models.CharField(choices=[('scheduled', 'Scheduled'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('canceled', 'Canceled')], default='scheduled', error_messages={'blank': 'Event status cannot be blank.', 'invalid_choice': 'Enter a valid event status.', 'null': 'Event status cannot be null.'}, max_length=20),
        ),
        migrations.AlterField(
            model_name='event',
            name='location',
            field=models.ForeignKey(error_messages={'null': 'Location cannot be null.'}, on_delete=django.db.models.deletion.CASCADE, to='events.location'),
        ),
        migrations.AlterField(
            model_name='event',
            name='payment_options',
            field=models.CharField(error_messages={'blank': 'Payment options cannot be blank.', 'max_length': 'Payment options cannot exceed 255 characters.', 'null': 'Payment options cannot be null.'}, max_length=255),
        ),
        migrations.AlterField(
            model_name='event',
            name='time',
            field=models.TimeField(error_messages={'invalid': 'Enter a valid time.', 'null': 'Time cannot be null.'}),
        ),
        migrations.AlterField(
            model_name='event',
            name='title',
            field=models.CharField(error_messages={'blank': 'Title cannot be blank.', 'max_length': 'Title cannot exceed 255 characters.', 'null': 'Title cannot be null.'}, max_length=255),
        ),
        migrations.AlterField(
            model_name='event',
            name='total_number_tickets',
            field=models.PositiveIntegerField(default=100, error_messages={'blank': 'Total number of tickets cannot be blank.', 'invalid': 'Enter a valid number of tickets.', 'null': 'Total number of tickets cannot be null.'}, validators=[django.core.validators.MinValueValidator(1, message='Total number of tickets must be at least 1.')]),
        ),
    ]
